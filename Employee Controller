package com.example.employeeattendancetracker.controller; 
import com.example.employeeattendancetracker.model.Employee; 
import com.example.employeeattendancetracker.service.EmployeeService; 
import org.springframework.beans.factory.annotation.Autowired; 
import org.springframework.http.HttpStatus; 
import org.springframework.http.ResponseEntity; 
import org.springframework.web.bind.annotation.*; 
import java.util.List; 
@RestController 
@RequestMapping("/api/employees") 
public class EmployeeController { 
    @Autowired 
    private EmployeeService employeeService; 
    // Get all employees (Manager/Admin access) 
    @GetMapping 
    public ResponseEntity<List<Employee>> getAllEmployees() { 
        List<Employee> employees = employeeService.getAllEmployees(); 
        return new ResponseEntity<>(employees, HttpStatus.OK); 
    } 
    // Get employee by ID (Manager/Admin access) 
    @GetMapping("/{id}") 
    public ResponseEntity<Employee> getEmployeeById(@PathVariable Long id) { 
        return employeeService.getEmployeeById(id) 
                .map(employee -> new ResponseEntity<>(employee, HttpStatus.OK)) 
                .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND)); 
    } 
    // Create a new employee (Manager/Admin access) 
    @PostMapping 
    public ResponseEntity<Employee> createEmployee(@RequestBody Employee employee) 
{ 
        Employee createdEmployee = employeeService.createEmployee(employee); 
        return new ResponseEntity<>(createdEmployee, HttpStatus.CREATED); 
    } 
    // Update an existing employee (Manager/Admin access) 
    @PutMapping("/{id}") 
    public ResponseEntity<Employee> updateEmployee(@PathVariable Long id, 
@RequestBody Employee employeeDetails) { 
        try { 
            Employee updatedEmployee = employeeService.updateEmployee(id, 
employeeDetails); 
            return new ResponseEntity<>(updatedEmployee, HttpStatus.OK); 
        } catch (RuntimeException e) { 
            return new ResponseEntity<>(HttpStatus.NOT_FOUND); 
        } 
    } 
    // Delete an employee (Manager/Admin access) 
    @DeleteMapping("/{id}") 
    public ResponseEntity<HttpStatus> deleteEmployee(@PathVariable Long id) { 
        try { 
      employeeService.deleteEmployee(id); 
            return new ResponseEntity<>(HttpStatus.NO_CONTENT); 
        } catch (RuntimeException e) { 
            return new ResponseEntity<>(HttpStatus.NOT_FOUND); 
        } 
    } 
}
